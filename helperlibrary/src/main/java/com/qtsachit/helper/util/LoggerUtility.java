package com.qtsachit.helper.util;

import android.util.Log;

/**
 * The class is Created by Sachit on 01/February/2017
 * <p>
 * Description- This class will provide the helper method for logging in application
 * <p>
 * Additional notes-
 */
public class LoggerUtility {

    public static final int DEBUG_LEVEL = 0;

    /**
     * Don't let anyone instantiate this class.
     */
    private LoggerUtility() {
        throw new Error("Do not need instantiate!");
    }

    public static boolean LOG_INFO = true;

    /**
     * Log an info message, if LOG_INFO is enabled.
     *
     * @param tag     The log tag.
     * @param message The message to print.
     */
    public static void info(String tag, String message) {
        if (LOG_INFO) {
            android.util.Log.i(tag, message);
        }
    }

    /**
     * Log an info message, if LOG_INFO is enabled.
     *
     * @param clazz   The caller's class, whose simpleName will be used as tag.
     * @param message The message to print.
     */
    public static void info(Class<?> clazz, String message) {
        info(clazz.getSimpleName(), message);
    }


    /**
     * Log a debug message, if LOG_DEBUG is enabled.
     *
     * @param tag     The log tag.
     * @param message The message to print.
     */
    public static void debug(String tag, String message) {
        if (LOG_INFO) {
            android.util.Log.d(tag, message);
        }
    }

    /**
     * Log a debug message, if LOG_DEBUG is enabled.
     *
     * @param clazz   The caller's class, whose simpleName will be used as tag.
     * @param message The message to print.
     */
    public static void debug(Class<?> clazz, String message) {
        debug(clazz.getSimpleName(), message);
    }

    /**
     * Log an error message
     *
     * @param tag     The log tag.
     * @param message The message to print.
     */
    public static void error(String tag, String message) {
        if (LOG_INFO) {
            android.util.Log.e(tag, message);
        }
    }

    /**
     * Log an error message.
     *
     * @param clazz   The caller's class, whose simpleName will be used as tag.
     * @param message The message to print.
     */
    public static void error(Class<?> clazz, String message) {
        error(clazz.getSimpleName(), message);
    }

    /**
     * What a Terrible Failure: Report a condition that should never happen. The
     * error will always be logged at level ASSERT with the call stack.
     * Depending on system configuration, a report may be added to the
     * {@link android.os.DropBoxManager} and/or the process may be terminated
     * immediately with an error dialog.
     *
     * @param tag Used to identify the source of a log message.
     * @param msg The message you would like logged.
     */
    public static void wtf(String tag, String msg) {
        if (Log.ASSERT > DEBUG_LEVEL) {
            Log.wtf(tag, msg);
        }
    }

    /**
     * Log an error message generated by an exception.
     *
     * @param tag The log tag.
     * @param e   The exception whose message will be printed.
     */
    public static void except(String tag, Throwable e, String p_prefix) {
        String realPrefix = "";
        if (p_prefix != null && p_prefix.length() > 0) {
            realPrefix = p_prefix + " |Â ";
        }

        android.util.Log.e(tag, realPrefix + "[" + e.getClass().getName() + "] " + " ~> " + e.getMessage());
    }

    /**
     * Log an error message generated by an exception.
     *
     * @param clazz The caller's class, whose simpleName will be used as tag.
     * @param e     The exception whose message will be printed.
     */
    public static void except(Class<?> clazz, Throwable e, String prefix) {
        except(clazz.getSimpleName(), e, prefix);
    }

    /**
     * Log an error message generated by an exception.
     *
     * @param tag The log tag.
     * @param e   The exception whose message will be printed.
     */
    public static void except(String tag, Throwable e) {
        except(tag, e, "");
    }

    /**
     * Log an error message generated by an exception.
     *
     * @param clazz The caller's class, whose simpleName will be used as tag.
     * @param e     The exception whose message will be printed.
     */
    public static void except(Class<?> clazz, Throwable e) {
        except(clazz, e, "");
    }

    /**
     * ViewUtility method to start a time measurement. Returns a long value with the current time millis.
     * This can be used later in logTimeMeasurement()
     *
     * @return the integer id used to log the time
     */
    public static synchronized long startTimeMeasurement() {
        return System.currentTimeMillis();
    }

    /**
     * Given the a long millis value (for example, given by startTimeMeasurement), logs the time passed between now and the given time.
     * Logs are printed using debug level, so they depend on LOG_DEBUG's value
     *
     * @param startMillis   The time when the measurement started
     * @param tag           The log tag.
     * @param messagePrefix The base message to print with the format
     * @return the computed time difference, in milliseconds
     */
    public static synchronized long logTimeMeasurement(long startMillis, String tag, String messagePrefix) {
        final long differenceMillis = System.currentTimeMillis() - startMillis;
        debug(tag, messagePrefix + " ~> " + differenceMillis + " ms");
        return differenceMillis;
    }

    /**
     * Given the a long millis value (for example, given by startTimeMeasurement), logs the time passed between now and the given time.
     * Logs are printed using debug level, so they depend on LOG_DEBUG's value
     *
     * @param clazz         The caller's class, whose simpleName will be used as tag.
     * @param messagePrefix The base message to print with the format
     *
     * @return the computed time difference, in milliseconds
     */
    public static synchronized long logTimeMeasurement(long startMillis, Class<?> clazz, String messagePrefix) {
        return logTimeMeasurement(startMillis, clazz.getSimpleName(), messagePrefix);
    }

}
